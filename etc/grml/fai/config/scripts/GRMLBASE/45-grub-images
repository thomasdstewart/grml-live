#!/bin/bash
# Filename:      ${GRML_FAI_CONFIG}/config/scripts/GRMLBASE/45-efi
# Purpose:       create grub image for use in ISO for EFI boot
# Authors:       grml-team (grml.org), (c) Michael Prokop <mika@grml.org>
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2 or any later version.
################################################################################

set -e


BOOTX64="${target}/boot/bootx64.efi"
EFI_IMG="${target}/boot/efi.img"
TMP_CONFIG="${target}/tmp/grub_config_efi"

rm -f "$BOOTX64" "$EFI_IMG" "$TMP_CONFIG"

cat > "$TMP_CONFIG" <<EOF
search.file /conf/bootid.txt root
set prefix=(\$root)/boot/grub
insmod normal
normal
echo "E: Could not find root device!"
EOF

BOOTX64="${BOOTX64##${target}}"
EFI_IMG="${EFI_IMG##${target}}"
TMP_CONFIG="${TMP_CONFIG##${target}}"

ARCHS=(i386-pc)

declare -A ADDITIONAL_MODULES
ADDITIONAL_MODULES[i386-pc]="biosdisk"

if ifclass AMD64 ; then
  if [ -r "${target}"/usr/lib/grub/x86_64-efi/moddep.lst ] ; then
    ARCHS+=(x86_64-efi)
    ADDITIONAL_MODULES[x86_64-efi]="efi_gop efi_uga"
  else
    echo "/usr/lib/grub/x86_64-efi/moddep.lst could not be found, skipping."
    echo "NOTE: grub-efi-amd64-bin not installed?"
  fi
fi

BOOTX64="${BOOTX64##${target}}"
EFI_IMG="${EFI_IMG##${target}}"
TMP_CONFIG="${TMP_CONFIG##${target}}"

for arch in ${ARCHS[@]} ; do
$ROOTCMD grub-mkimage -O $arch -o /boot/$arch.img --prefix=/boot/grub/ --config="$TMP_CONFIG" \
  echo iso9660 part_msdos search_fs_file test \
  fat ext2 reiserfs xfs btrfs squash4 part_gpt lvm \
  ${ADDITIONAL_MODULES[$arch]}
done

if [ -f "${target}/boot/i386-pc.img" ] ; then
  mv "${target}/boot/i386-pc.img" "${target}/boot/grub/grub.img"
fi

if [ -f "${target}/boot/x86_64-efi.img" ] ; then
  mv "${target}/boot/x86_64-efi.img" "${target}/${BOOTX64}"
fi

if ifclass AMD64 ; then
  if ! [ -r "${target}/${BOOTX64}" ] ; then
    echo "Can not access grub efi image." >&2
    exit 1
  fi

  dd if=/dev/zero of="${target}/${EFI_IMG}" bs=4M count=1 2>/dev/null
  $ROOTCMD mkfs.vfat -n GRML "$EFI_IMG" >/dev/null
  $ROOTCMD mmd -i "$EFI_IMG" ::EFI
  $ROOTCMD mmd -i "$EFI_IMG" ::EFI/BOOT

  # TODO - we have to us this iff not using secure boot:
  # install "$BOOTX64" as ::EFI/BOOT/bootx64.efi inside image file "$EFI_IMG":
  # $ROOTCMD mcopy -i "$EFI_IMG" "$BOOTX64" ::EFI/BOOT/bootx64.efi >/dev/null

  # FIXME - live-media-path + bootid are hardcoded, this needs to be replaced with live-media-path=/live/%GRML_NAME%/ and bootid=%BOOTID%
  # FIXME - which boot entries do we want to provide?
  # IDEA - move all of this to a separate script/step inside grml-live and make
  # it customizable
  GRUBCFG=$($ROOTCMD mktemp)
  cat >"${target}/${GRUBCFG}" << EOF
if loadfont /boot/grub/font.pf2 ; then
        set gfxmode=auto
        insmod efi_gop
        insmod efi_uga
        insmod gfxterm
        terminal_output gfxterm
fi

set menu_color_normal=white/black
set menu_color_highlight=black/light-gray

# set prefix=(hd0)
set root=(hd0)

menuentry "Boot Grml in normal mode" {
        set gfxpayload=keep
        linux   /boot/grml/vmlinuz apm=power-off boot=live live-media-path=/live/grml/ bootid=grml001 "\${loopback}" "\${kernelopts}" nomce net.ifnames=0 ---
        initrd  /boot/grml/initrd.img
}
EOF
  $ROOTCMD mmd -i "$EFI_IMG" ::EFI/ubuntu
  $ROOTCMD mcopy -i "$EFI_IMG" "${GRUBCFG}" ::EFI/ubuntu/grub.cfg

  # TODO - this is ubuntu-mode only, we also want to support linuxfoundation approach
  # FIXME - use mtools on/from host instead?
  # FIXME - how do we handle TEMPLATE_DIRECTORY?
  cp /usr/share/grml-live/templates/efi/boot/grubx64.efi.signed $target/tmp/
  $ROOTCMD mcopy -i "$EFI_IMG" "/tmp/grubx64.efi.signed" ::EFI/BOOT/grubx64.efi >/dev/null
  rm $target/tmp/grubx64.efi.signed

  cp /usr/share/grml-live/templates/efi/boot/shim.efi.signed $target/tmp/
  $ROOTCMD mcopy -i "$EFI_IMG" "/tmp/shim.efi.signed" ::EFI/BOOT/bootx64.efi >/dev/null
  rm $target/tmp/shim.efi.signed

  # FIXME
  echo "Generated EFI image $BOOTX64"
  echo "Generated bootx64 image $EFI_IMG"
fi

rm -f "${target}/${TMP_CONFIG}"
echo "Generated Grub images"


## END OF FILE #################################################################
# vim:ft=sh expandtab ai tw=80 tabstop=4 shiftwidth=2
